{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","react_default","a","createElement","this","onChange","placeholder","onClick","React","Component","Todo","style","display","justifyContent","textDecoration","todo","toggleComplete","onDelete","TodoList","todos","todoToShow","toggleAllComplete","addTodo","concat","toConsumableArray","map","objectSpread","updateTodoToShow","s","handleDeleteTodo","filter","removeCompleted","_this2","todoToshow","TodoForm_TodoForm","key","length","some","App","count","increment","decrement","className","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86b80932.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\n\nexport default class TodoForm extends React.Component {\n  state ={\n    text: ''\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    // Submit form here\n    // the onSubmit method is in TodoList as\n    // TodoForm onSubmit={this.addTodo}\n    this.props.onSubmit({\n      // npm install shortid\n      id: shortid.generate(),\n      text: this.state.text,\n      complete: false\n    });\n    // to have the text be emptied in the input\n    this.setState({\n      text: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n          name=\"text\"\n          value={this.state.text}\n          onChange={this.handleChange}\n          placeholder=\"Things to do...\"\n        />\n        <button onClick={this.handleChange}>Add Todo</button>\n      </form>\n    );\n  }\n}","import React from \"react\";\n\nexport default props => (\n  <div style={{display: \"flex\", justifyContent: \"center\"}}>\n    {/* When the todo button is clicked,\n    it will call on the function toggleComplete */}\n    <div \n      style={{\n        // cross the text when it has been clicked\n        // using the ? operator to let code know,\n        // when props.todo item has been completed,\n        // add line through. \n        textDecoration: props.todo.complete ? \"line-through\": \"\"\n      }}\n      onClick={props.toggleComplete}\n      >\n      {props.todo.text}\n    </div>\n    {/* calling the delete function */}\n  <button onClick={props.onDelete}>x</button>\n</div>\n);","import React from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nexport default class TodoList extends React.Component {\n\n  state = {\n    // lifting up the state\n    // empty array of todos\n    todos: [],\n    todoToShow: \"all\",\n    toggleAllComplete: true\n  };\n\n  addTodo = (todo) => {\n    // creating the copy of the array\n    // and passing to the new var newTodos\n\n    // const newTodos=[todo, ...this.state.todos];\n\n    // instead of using the newTodos array\n    // add it too the setState\n\n    this.setState(state => ({\n      todos: [todo, ...state.todos]\n    }));\n  };\n\n  toggleComplete = id => {\n    this.setState(state => ({\n      todos: this.state.todos.map(todo => {\n        if(todo.id === id) {\n        // Suppose to update\n          return {\n            // insteading having the keys:\n            // id: todo.id,\n            // text: todo.text,\n\n            // we can do:\n            ...todo,\n            // ! -> inverse value\n            // converts the operand to boolean type to True/False\n            // Returns false if its single operand that can be \n            // converted to true; otherwise, returns true.\n            complete: !todo.complete\n          };\n        } else {\n          // if id is not true,\n          return todo;\n        }\n      })\n    }));\n  };\n\n  // function to updateToDoShow\n  updateTodoToShow = s => {\n    this.setState({\n      todoToShow: s\n    });\n  };\n\n  // function to delete todo items\n  handleDeleteTodo = id => {\n    this.setState(state => ({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    }));\n  };\n\n  // function to remove all crossed todos\n  removeCompleted = () => {\n    this.setState(state => ({\n      todos: this.state.todos.filter(todo => todo.complete)\n    }));\n  };\n\n  render() {\n    // adding the render for the buttons\n    let todos = [];\n\n    if (this.state.todoToShow === \"all\") {\n      todos = this.state.todos;\n    } else if (this.state.todoToshow === \"active\") {\n      todos = this.state.todos.filter(todo => !todo.complete)\n    } else if (this.state.todoToshow === \"complete\") {\n      todos = this.state.todos.filter(todo => todo.complete)\n    }\n\n\n    return (\n    <div>\n      <TodoForm onSubmit={this.addTodo} />\n      {todos.map(todo => (\n        // <div key={todo.id}>{todo.text}</div>\n        \n        // adding Todo.js file to create a function\n        <Todo \n          key={todo.id} \n          // prop that is passing the function\n          toggleComplete={() => this.toggleComplete(todo.id)} \n\n          // text={todo.text} \n          // instead of text, we use todo(go to Todo.js)\n          // creating a delete function\n          onDelete={() => this.handleDeleteTodo(todo.id)}\n          todo={todo} \n          />\n      ))}\n      {/* No use for JSON.stringify, use map */}\n      {/* {JSON.stringify(this.state.todos)} */}\n      <div>\n        {/* need to show the number of active todos */}\n        Things I need to do: \n        {/* \n          using the filter method, to go through each individual index \n          and store the elements back to the todo empty array in state\n        */}\n          {this.state.todos.filter(todo => !todo.complete).length}\n      </div>\n      <div>\n        <button onClick={() => this.updateTodoToShow(\"all\")}>\n          all\n        </button>\n        <button onClick={() => this.updateTodoToShow(\"active\")}>\n          active\n        </button>\n        <button onClick={() => this.updateTodoToShow(\"complete\")}>\n          complete\n        </button>\n      </div>\n\n      {/* creating a button function to remove all completed todos */}\n      {/* Give the todo items that are complete */}\n      {/* instead of using filter, we only need to find the crossed completed todos\n      so use the some method, some will find the items and exit early */}\n      {this.state.todos.some(todo => todo.complete).length ? (\n        <div>\n          <button onClick={this.removeCompleted}>\n            Remove all complete todos\n          </button>\n        </div>\n      ) : null}\n      <div>\n        <button \n          onClick={() => \n            this.setState(state => ({\n              todos: state.todos.map(todo => ({\n                ...todo,\n                complete: state.toggleAllComplete\n              })),\n              toggleAllComplete: !state.toggleAllComplete\n            }))\n          }\n        >\n          toggle all complete: {`${this.state.toggleAllComplete}`}\n        </button>\n      </div>\n    </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport TodoList from './components/TodoList';\nimport \"./App.css\";\n\n\n// https://www.youtube.com/watch?v=I6IY2TqnPDA\n// finished, but active and complete buttons have small issue.\n// design site\n// add more functionalities \n\nclass App extends Component {\n  state = {\n    count: 0\n  };\n\n  increment = () => {\n    this.setState({\n      count: this.state.count + 1\n    });\n  };\n\n  decrement = () => {\n    this.setState({\n      count: this.state.count - 1\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}